cloud_dependent_pkg: &cloud_dependent_pkg "commands"

functions:
  "fetch_go113":
    - command: shell.exec
      params:
        shell: "bash"
        script: |
          set -e
          wget --quiet ${go_url}
          tar xvf ./go1.13*gz
  "fetch_yarn":
    - command: shell.exec
      params:
        shell: "bash"
        script: |
          set -e
          curl --silent -OL https://yarnpkg.com/latest.tar.gz
          tar zvxf latest.tar.gz
          mv yarn-* yarn
  "setup_node": &setup_node
      command: shell.exec
      params:
        shell: "bash"
        script: |
          set -e
          export ROOT_DIR=`pwd`
          export NVM_DIR="$ROOT_DIR/.nvm"
          if [ ! -d "$NVM_DIR" ]; then
            git clone https://github.com/nvm-sh/nvm.git "$NVM_DIR"
            cd "$NVM_DIR"
            git checkout `git describe --abbrev=0 --tags --match "v[0-9]*" $(git rev-list --tags --max-count=1)`
          fi 
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          nvm install ${node_version}
  "setup_project":
    - command: git.get_project
      params:
        directory: stitch-cli

  "setup_mongod":
      - command: shell.exec
        params:
          shell: "bash"
          script: |
            set -v
            curl --silent ${mongodb_url} | tar xvz
      - command: shell.exec
        params:
          shell: "bash"
          background: true
          script: |
            set -v
            cd mongodb-*
            echo "starting mongod..."
            mkdir db_files
            ./bin/mongod --dbpath ./db_files --port 26000 --replSet "test" &
            echo "waiting for mongod to start up"
      - command: shell.exec
        params:
          shell: "bash"
          script: |
            set -e
            cd mongodb-*
            echo "waiting for mongod to start up"
            ./bin/mongo --nodb --eval 'assert.soon(function(x){try{var d = new Mongo("localhost:26000"); return true}catch(e){return false}}, "timed out connecting")'
            ./bin/mongo --port 26000 --eval 'rs.initiate()'
            echo "mongod is up."
  "setup_transpiler": &setup_transpiler
      - *setup_node
      - command: shell.exec
        params:
          shell: "bash"
          script: |
            set -e
            set -v
            export ROOT_DIR=`pwd`
            export PATH="$ROOT_DIR/yarn/bin:$PATH"
            export NVM_DIR="$ROOT_DIR/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm use ${node_version}
            cd stitch-cli/etc/transpiler
            yarn && yarn run build -t ${transpiler_target}
  "setup_stitch_server":
    - command: shell.exec
      params:
        shell: "bash"
        script: |
          wget --quiet "${libmongo_url}"
          chmod +x libmongo.so
    - command: shell.exec
      params:
        shell: "bash"
        script: |
          git clone git@github.com:10gen/stitch.git
    - command: shell.exec
      params:
        shell: "bash"
        script: |
          set -e
          cd stitch
          mkdir -p etc/dylib
          cd etc/dylib
          curl -s "${server_stitch_lib_url}" | tar xvfz - --strip-components=1
    - command: shell.exec
      params:
        shell: "bash"
        script: |
          set -e
          export ROOT_DIR=`pwd`
          export PATH="$ROOT_DIR/yarn/bin:$PATH"
          export NVM_DIR="$ROOT_DIR/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          nvm use ${node_version}
          cd stitch/etc/transpiler
          curl -OL https://yarnpkg.com/latest.tar.gz
          tar zvxf latest.tar.gz
          mv yarn-* yarn
          yarn install && yarn run build -t ${transpiler_target}
  "start_server":
    - command: shell.exec
      params:
        shell: "bash"
        background: true
        script: |
          export ROOT_DIR=`pwd`
          export PATH="$ROOT_DIR:$PATH"
          export GOROOT=$ROOT_DIR/go
          export PATH=$GOROOT/bin:$PATH
          cd $ROOT_DIR/stitch
          export PATH="$ROOT_DIR/stitch/etc/transpiler/bin:$PATH"
          export LD_LIBRARY_PATH="$ROOT_DIR/stitch/etc/dylib/lib"
          which transpiler
          cat > atlas_config.json <<EOF
          {
            "admin": {
              "authProviders": [
                {
                  "name": "mongodb-cloud",
                  "type": "mongodb-cloud",
                  "config": {
                      "baseUrl": "https://cloud-dev.mongodb.com",
                      "adminUsername": "${stitch_mongodb_cloud_atlas_admin_username}",
                      "adminAPIKey": "${stitch_mongodb_cloud_atlas_admin_api_key}"
                    },
                    "metadataFields": [{ "name": "name", "required": false}]
                }
              ]
            }
          }
          EOF
          go run cmd/server/main.go --configFile $ROOT_DIR/stitch-cli/testdata/configs/stitch_server_test_config.json --configFile ./atlas_config.json
    - command: shell.exec
      params:
        shell: "bash"
        script: |
          counter=0
          until $(curl --output /dev/null --silent --head --fail ${stitchServerURL}); do
            echo "checking for API server to be up..."
            sleep 1
            let counter++
            if [ $counter -gt 100 ]; then
              exit 1
            fi
          done

tasks:
  - name: test_unit
    exec_timeout_secs: 3600
    commands:
      - func: "fetch_go113"
      - func: "fetch_yarn"
      - func: "setup_project"
      - func: "setup_transpiler"
      - command: shell.exec
        params:
          shell: "bash"
          script: |
            set -v
            set -e
            export ROOT_DIR=`pwd`
            export PATH="$ROOT_DIR:$PATH"
            export PATH=$PATH:$ROOT_DIR/stitch-cli/etc/transpiler/bin/
            export GOROOT=$ROOT_DIR/go
            export PATH=$GOROOT/bin:$PATH
            cd $ROOT_DIR/stitch-cli
            go test -v -covermode=count -coverprofile=$ROOT_DIR/cover.out $(go list github.com/10gen/stitch-cli/...) > $ROOT_DIR/stitch-cli.suite
      - command: s3.put
        params:
          aws_key: ${test_aws_key}
          aws_secret: ${test_aws_secret}
          local_file: cover.out
          remote_file: ${task_id}/cover.out
          bucket: stitch-test-artifacts
          content_type: text/plain
          permissions: public-read

  - name: tests-with-cloud
    exec_timeout_secs: 3600
    commands:
      - func: "fetch_go113"
      - func: "fetch_yarn"
      - func: "setup_project"
      - func: "setup_transpiler"
      - func: "setup_mongod"
      - func: "setup_stitch_server"
      - func: "start_server"
      - command: shell.exec
        params:
          shell: "bash"
          script: |
            set -v
            set -e
            export ROOT_DIR=`pwd`
            export PATH="$ROOT_DIR:$PATH"
            export PATH=$PATH:$ROOT_DIR/stitch-cli/etc/transpiler/bin/
            export GOROOT=$ROOT_DIR/go
            export PATH=$GOROOT/bin:$PATH
            export STITCH_MONGODB_CLOUD_GROUP_ID="${stitch_mongodb_cloud_group_id}"
            export STITCH_MONGODB_CLOUD_USERNAME="${stitch_mongodb_cloud_username}"
            export STITCH_MONGODB_CLOUD_API_KEY="${stitch_mongodb_cloud_api_key}"
            export STITCH_MONGODB_CLOUD_ADMIN_USERNAME="${stitch_mongodb_cloud_admin_username}"
            export STITCH_MONGODB_CLOUD_ADMIN_API_KEY="${stitch_mongodb_cloud_admin_api_key}"
            export STITCH_MONGODB_CLOUD_API_BASE_URL="${mongoDBCloudURL}"
            export STITCH_SERVER_BASE_URL="${stitchServerURL}"
            cd $ROOT_DIR/stitch-cli
            go test -v -covermode=count -coverprofile=$ROOT_DIR/cover.out $(go list github.com/10gen/stitch-cli/${cloud_dependent_pkg}/...) -timeout 25m  -run TestCloud > $ROOT_DIR/stitch-cli.suite
      - command: s3.put
        params:
          aws_key: ${test_aws_key}
          aws_secret: ${test_aws_secret}
          local_file: cover.out
          remote_file: ${task_id}/cover.out
          bucket: stitch-test-artifacts
          content_type: text/plain
          permissions: public-read

  - name: lint
    commands:
      - func: "fetch_go113"
      - func: "setup_project"
      - command: shell.exec
        params:
          shell: "bash"
          script: |
            export ROOT_DIR=`pwd`
            export GOROOT=$ROOT_DIR/go
            export PATH=$GOROOT/bin:$PATH
            cd $ROOT_DIR/stitch-cli
            go run github.com/golangci/golangci-lint/cmd/golangci-lint run ./...

  - name: build_publish_clis
    depends_on:
      - name: test_unit
      - name: lint
    patchable: false
    commands:
      - func: "fetch_go113"
      - func: "setup_project"
      - command: shell.exec
        params:
          shell: "bash"
          script: |
            set -v
            set -e
            export ROOT_DIR=`pwd`
            export PATH="$ROOT_DIR:$PATH"
            export GOROOT=$ROOT_DIR/go
            export PATH=$GOROOT/bin:$PATH
            cd $ROOT_DIR/stitch-cli
            export VERSION="${version}"
            export GOARCH=amd64
            export GOOS=linux
            export OSARCH=linux-amd64
            echo "Building stitch-cli for $GOOS on $GOARCH"
            REPLACE_VARS="-ldflags \"-X github.com/10gen/stitch-cli/utils.CLIVersion=$VERSION -X github.com/10gen/stitch-cli/utils.cliOSArch=$OSARCH\""
            eval go build $REPLACE_VARS -o stitch-cli-linux-amd64 main.go
            export GOOS=darwin
            export OSARCH=macos-amd64
            REPLACE_VARS="-ldflags \"-X github.com/10gen/stitch-cli/utils.CLIVersion=$VERSION -X github.com/10gen/stitch-cli/utils.cliOSArch=$OSARCH\""
            echo "Building stitch-cli for $GOOS on $GOARCH"
            eval go build $REPLACE_VARS -o stitch-cli-macos-amd64 main.go
            export GOOS=windows
            export OSARCH=windows-amd64
            REPLACE_VARS="-ldflags \"-X github.com/10gen/stitch-cli/utils.CLIVersion=$VERSION -X github.com/10gen/stitch-cli/utils.cliOSArch=$OSARCH\""
            echo "Building stitch-cli for $GOOS on $GOARCH"
            eval go build $REPLACE_VARS -o stitch-cli-windows-amd64 main.go

            curl -OL https://yarnpkg.com/latest.tar.gz
            tar zvxf latest.tar.gz
            mv yarn-* yarn
            # build transpilers
            cd etc/transpiler
            export PATH="$ROOT_DIR/yarn/bin:$PATH"
            export NVM_DIR="$ROOT_DIR/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            yarn install 
            # linux 
            yarn run build -t node8-linux-x64
            mv bin/transpiler bin/transpiler-linux-x64
            # mac 
            yarn run build -t node8-macos-x64
            mv bin/transpiler bin/transpiler-macos-x64
            # win 
            yarn run build -t node8-win-x64 
            mv bin/transpiler.exe bin/transpiler-win-x64

      - command: s3.put
        params:
          aws_key: ${artifacts_aws_key}
          aws_secret: ${artifacts_aws_secret}
          local_file: stitch-cli/stitch-cli-linux-amd64
          remote_file: ${build_id}/linux-amd64/stitch-cli
          bucket: stitch-clis
          content_type: application/octet-stream
          permissions: public-read
      - command: s3.put
        params:
          aws_key: ${artifacts_aws_key}
          aws_secret: ${artifacts_aws_secret}
          local_file: stitch-cli/stitch-cli-macos-amd64
          remote_file: ${build_id}/macos-amd64/stitch-cli
          bucket: stitch-clis
          content_type: application/octet-stream
          permissions: public-read
      - command: s3.put
        params:
          aws_key: ${artifacts_aws_key}
          aws_secret: ${artifacts_aws_secret}
          local_file: stitch-cli/stitch-cli-windows-amd64
          remote_file: ${build_id}/windows-amd64/stitch-cli.exe
          bucket: stitch-clis
          content_type: application/octet-stream
          permissions: public-read
      # transpilers
      - command: s3.put
        params:
          aws_key: ${artifacts_aws_key}
          aws_secret: ${artifacts_aws_secret}
          local_file: stitch-cli/etc/transpiler/bin/transpiler-linux-x64
          remote_file: ${build_id}/linux-amd64/transpiler
          bucket: stitch-clis
          content_type: application/octet-stream
          permissions: public-read
      - command: s3.put
        params:
          aws_key: ${artifacts_aws_key}
          aws_secret: ${artifacts_aws_secret}
          local_file: stitch-cli/etc/transpiler/bin/transpiler-macos-x64
          remote_file: ${build_id}/macos-amd64/transpiler
          bucket: stitch-clis
          content_type: application/octet-stream
          permissions: public-read
      - command: s3.put
        params:
          aws_key: ${artifacts_aws_key}
          aws_secret: ${artifacts_aws_secret}
          local_file: stitch-cli/etc/transpiler/bin/transpiler-win-x64
          remote_file: ${build_id}/windows-amd64/transpiler.exe
          bucket: stitch-clis
          content_type: application/octet-stream
          permissions: public-read

post:
  - command: gotest.parse_files
    params:
      files: ["*.suite"]

buildvariants:
- name: rhel70
  display_name: rhel70
  run_on:
    - rhel70
  expansions:
    go_url: "https://dl.google.com/go/go1.13.linux-amd64.tar.gz"
    server_stitch_lib_url: 'https://s3.amazonaws.com/mciuploads/mongodb-mongo-master/stitch-support/enterprise-rhel-70-64-bit/18ca0d551818d6c8274358b8e6444640bec93c88/stitch-support-4.3.0-120-g18ca0d5.tgz'
    mongodb_url: https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-4.0.2.tgz
    node_version: 10.15.1
    transpiler_target: node8-linux
    libmongo_url: 'https://s3.amazonaws.com/stitch-artifacts/stitch-mongo-libs/stitch_mongo_libs_linux_64_patch_f1f04683a9b5612f5a82a2d7f97818ef74a8fb05_5d898ee3306615699f265907_19_09_24_03_35_01/libmongo.so'
    mongoDBCloudURL: https://cloud-dev.mongodb.com
    stitchServerURL: http://localhost:9090
    version: 1.11.0
  tasks:
  - name: test_unit
  - name: tests-with-cloud
  - name: lint
  - name: build_publish_clis
