cloud_dependent_pkg: &cloud_dependent_pkg "commands"

functions:
  "setup_project":
    - command: shell.exec
      params:
        script: |
          mkdir -p src/github.com/10gen
    - command: git.get_project
      params:
        directory: src/github.com/10gen/stitch-cli

  "setup_mongod":
      - command: shell.exec
        params:
          script: |
            set -v
            curl --silent ${mongodb_url} | tar xvz
      - command: shell.exec
        params:
          background: true
          script: |
            set -v
            cd mongodb-*
            echo "starting mongod..."
            mkdir db_files
            ./bin/mongod --dbpath ./db_files --port 26000 &
            echo "waiting for mongod to start up"
      - command: shell.exec
        params:
          script: |
            set -e
            cd mongodb-*
            echo "waiting for mongod to start up"
            ./bin/mongo --nodb --eval 'assert.soon(function(x){try{var d = new Mongo("localhost:26000"); return true}catch(e){return false}}, "timed out connecting")'
            echo "mongod is up."

  "setup_stitch_server":
    - command: shell.exec
      params:
        script: |
          wget --quiet "${libmongo_url}"
          chmod +x libmongo.so
    - command: shell.exec
      params:
        script: |
          mkdir -p src/github.com/10gen
    - command: shell.exec
      params:
        script: |
          mkdir -p server/src/github.com/10gen
            git clone git@github.com:10gen/stitch.git server/src/github.com/10gen/stitch
    - command: shell.exec
      params:
        script: |
          set -e
          cd server/src/github.com/10gen/stitch/etc/transpiler
          yarn install && yarn run build -t ${transpiler_target}
  "start_server":
    - command: shell.exec
      params:
        background: true
        script: |
          export PATH="`pwd`:$PATH"
          cd server
          export GOPATH=`pwd`
          cd $GOPATH/src/github.com/10gen/stitch
          export PATH="$GOPATH/src/github.com/10gen/stitch/etc/transpiler/bin:$PATH"
          which transpiler
          go run cmd/server/main.go --configFile $GOPATH/../src/github.com/10gen/stitch-cli/testdata/configs/stitch_server_test_config.json
    - command: shell.exec
      params:
        script: |
          counter=0
          until $(curl --output /dev/null --silent --head --fail ${stitchServerURL}); do
            echo "checking for API server to be up..."
            sleep 1
            let counter++
            if [ $counter -gt 100 ]; then
              exit 1
            fi
          done

  "set_github_build_status":
    - command: shell.exec
      params:
        silent: true
        script: |
          status_url=`curl -X POST -d "{}" -H "Content-Type: application/json" "${stitch_cli_evg_hook_url}?secret=${stitch_cli_evg_secret}&versionId=${version_id}"`
          if [ "$status_url" = "null" ]; then
            exit 0
          fi
          status_url=`sed -e 's/^"//' -e 's/"$//' <<<"$status_url"`
          state=`cat commit_state`
          curl -X POST -H "Content-Type: application/json" $status_url -d "{\"state\": \"$state\", \"target_url\": \"https://evergreen.mongodb.com/build/${build_id}\", \"context\": \"continuous-integration/evergreen-ci/${build_variant}\"}"

tasks:
  - name: test_unit
    exec_timeout_secs: 3600
    commands:
      - func: "setup_project"
      - command: shell.exec
        params:
          script: |
            set -v
            set -e
            export GOPATH=`pwd`
            export PATH="`pwd`:$PATH"
            go test -v $(go list github.com/10gen/stitch-cli/...) > $GOPATH/stitch-cli.suite

  - name: tests-with-cloud
    exec_timeout_secs: 3600
    commands:
      - func: "setup_project"
      - func: "setup_mongod"
      - func: "setup_stitch_server"
      - func: "start_server"
      - command: shell.exec
        params:
          script: |
            set -v
            set -e
            export GOPATH=`pwd`
            export PATH="`pwd`:$PATH"
            export STITCH_MONGODB_CLOUD_PRIVATE_API_BASE_URL="${mongoDBCloudURL}"
            export STITCH_SERVER_BASE_URL="${stitchServerURL}"
            go test -v $(go list github.com/10gen/stitch-cli/${cloud_dependent_pkg}/...) -run TestCloud > $GOPATH/stitch-cli.suite

  - name: gometalinter
    commands:
      - func: "setup_project"
      - command: shell.exec
        params:
          script: |
            export GOPATH=`pwd`
            go get -u github.com/alecthomas/gometalinter
            $GOPATH/bin/gometalinter --install
            cd src/github.com/10gen/stitch-cli
            $GOPATH/bin/gometalinter --exclude=vendor --vendor --config=.linter.config ./...

  - name: build_publish_clis
    depends_on:
      - name: test_unit
      - name: gometalinter
    patchable: false
    commands:
      - func: "setup_project"
      - command: shell.exec
        params:
          script: |
            set -v
            set -e
            export GOPATH=`pwd`
            export PATH="`pwd`:$PATH"
            cd src/github.com/10gen/stitch-cli
            export VERSION=20180326
            export GOARCH=amd64
            export GOOS=linux
            export OSARCH=linux-amd64
            echo "Building stitch-cli for $GOOS on $GOARCH"
            REPLACE_VARS="-ldflags \"-X github.com/10gen/stitch-cli/utils.cliVersion=$VERSION -X github.com/10gen/stitch-cli/utils.cliOSArch=$OSARCH\""
            eval go build $REPLACE_VARS -o stitch-cli-linux-amd64 main.go
            export GOOS=darwin
            export OSARCH=macos-amd64
            REPLACE_VARS="-ldflags \"-X github.com/10gen/stitch-cli/utils.cliVersion=$VERSION -X github.com/10gen/stitch-cli/utils.cliOSArch=$OSARCH\""
            echo "Building stitch-cli for $GOOS on $GOARCH"
            eval go build $REPLACE_VARS -o stitch-cli-macos-amd64 main.go
            export GOOS=windows
            export OSARCH=windows-amd64
            REPLACE_VARS="-ldflags \"-X github.com/10gen/stitch-cli/utils.cliVersion=$VERSION -X github.com/10gen/stitch-cli/utils.cliOSArch=$OSARCH\""
            echo "Building stitch-cli for $GOOS on $GOARCH"
            eval go build $REPLACE_VARS -o stitch-cli-windows-amd64 main.go
      - command: s3.put
        params:
          aws_key: ${artifacts_aws_key}
          aws_secret: ${artifacts_aws_secret}
          local_file: src/github.com/10gen/stitch-cli/stitch-cli-linux-amd64
          remote_file: ${build_id}/linux-amd64/stitch-cli
          bucket: stitch-clis
          content_type: application/octet-stream
          permissions: public-read
      - command: s3.put
        params:
          aws_key: ${artifacts_aws_key}
          aws_secret: ${artifacts_aws_secret}
          local_file: src/github.com/10gen/stitch-cli/stitch-cli-macos-amd64
          remote_file: ${build_id}/macos-amd64/stitch-cli
          bucket: stitch-clis
          content_type: application/octet-stream
          permissions: public-read
      - command: s3.put
        params:
          aws_key: ${artifacts_aws_key}
          aws_secret: ${artifacts_aws_secret}
          local_file: src/github.com/10gen/stitch-cli/stitch-cli-windows-amd64
          remote_file: ${build_id}/windows-amd64/stitch-cli.exe
          bucket: stitch-clis
          content_type: application/octet-stream
          permissions: public-read

  - name: github_pull_request_start
    priority: 100
    commands:
      - command: shell.exec
        params:
          script: |
            if ! [ "${is_patch}" = "true" ]; then
              exit 0
            fi
            echo pending > commit_state
      - func: "set_github_build_status"

  - name: github_pull_request_end
    depends_on:
      - name: github_pull_request_start
      - name: test_unit
        status: "*"
        variant: "linux-64"
      - name: gometalinter
        status: "*"
        variant: "linux-64"
    commands:
      - command: shell.exec
        params:
          silent: true
          script: |
            if ! [ "${is_patch}" = "true" ]; then
              exit 0
            fi
            curl -H "Auth-Username: ${evg_rest_user}" -H "Api-Key: ${evg_rest_api_key}"  https://evergreen.mongodb.org/rest/v1/builds/${build_id} | python -c "import sys, json; tasks = json.load(sys.stdin)['tasks']; sys.exit(0) if all(tasks[task]['status'] == 'success' or task == 'github_pull_request_end'  for task in tasks) else sys.exit(1)"
            if [ $? -eq 0 ]; then
              state="success"
            else
              state="failure"
            fi
            echo $state > commit_state
      - func: "set_github_build_status"

post:
  - command: gotest.parse_files
    params:
      files: ["*.suite"]

buildvariants:
- name: linux-64
  display_name: Linux-64
  run_on:
  - baas-linux
  expansions:
    transpiler_target: node8-linux
    mongodb_url: https://downloads.mongodb.com/linux/mongodb-linux-x86_64-enterprise-rhel70-3.4.6.tgz
    libmongo_url: https://s3.amazonaws.com/stitch-artifacts/stitch-mongo-libs/stitch_mongo_libs_linux_64_patch_1f02b06ec6fd48bad0b725b77bc194c84f839f53_5ab7216fc9ec44724e08f194_18_03_25_04_11_28/libmongo.so
    mongoDBCloudURL: https://cloud-dev.mongodb.com
    stitchServerURL: http://localhost:9090
  tasks:
  - name: github_pull_request_start
  - name: test_unit
  - name: tests-with-cloud
  - name: gometalinter
  - name: build_publish_clis
  - name: github_pull_request_end
