cloud_dependent_pkg: &cloud_dependent_pkg "commands"

functions:
  "setup_project":
    - command: shell.exec
      params:
        script: |
          mkdir -p src/github.com/10gen
    - command: git.get_project
      params:
        directory: src/github.com/10gen/stitch-cli

  "setup_mongod":
      - command: shell.exec
        params:
          script: |
            set -v
            curl --silent ${mongodb_url} | tar xvz
      - command: shell.exec
        params:
          background: true
          script: |
            set -v
            cd mongodb-*
            echo "starting mongod..."
            mkdir db_files
            ./bin/mongod --dbpath ./db_files --port 26000 &
            echo "waiting for mongod to start up"
      - command: shell.exec
        params:
          script: |
            set -e
            cd mongodb-*
            echo "waiting for mongod to start up"
            ./bin/mongo --nodb --eval 'assert.soon(function(x){try{var d = new Mongo("localhost:26000"); return true}catch(e){return false}}, "timed out connecting")'
            echo "mongod is up."

  "setup_stitch_server":
    - command: shell.exec
      params:
        script: |
          wget --quiet "${libmongo_url}"
          chmod +x libmongo.so
    - command: shell.exec
      params:
        script: |
          mkdir -p src/github.com/10gen
    - command: shell.exec
      params:
        script: |
          mkdir -p server/src/github.com/10gen
            git clone git@github.com:10gen/stitch.git server/src/github.com/10gen/stitch
    - command: shell.exec
      params:
        script: |
          set -e
          cd server/src/github.com/10gen/stitch/etc/transpiler
          yarn install && yarn run build -t ${transpiler_target}
  "start_server":
    - command: shell.exec
      params:
        background: true
        script: |
          export PATH="`pwd`:$PATH"
          cd server
          export GOPATH=`pwd`
          cd $GOPATH/src/github.com/10gen/stitch
          export PATH="$GOPATH/src/github.com/10gen/stitch/etc/transpiler/bin:$PATH"
          which transpiler
          cat > atlas_config.json <<EOF
          {
            "admin": {
              "authProviders": [
                {
                  "name": "mongodb-cloud",
                  "type": "mongodb-cloud",
                  "config": {
                      "publicAPIBaseUrl": "https://cloud-dev.mongodb.com/api/public/v1.0",
                      "atlasAPIBaseUrl": "https://cloud-dev.mongodb.com/api/atlas/v1.0",
                      "adminUsername": "${stitch_mongodb_cloud_atlas_admin_username}",
                      "adminAPIKey": "${stitch_mongodb_cloud_atlas_admin_api_key}"
                    },
                    "metadataFields": [{ "name": "name", "required": false}]
                }
              ]
            }
          }
          EOF
          go run cmd/server/main.go --configFile $GOPATH/../src/github.com/10gen/stitch-cli/testdata/configs/stitch_server_test_config.json --configFile ./atlas_config.json
    - command: shell.exec
      params:
        script: |
          counter=0
          until $(curl --output /dev/null --silent --head --fail ${stitchServerURL}); do
            echo "checking for API server to be up..."
            sleep 1
            let counter++
            if [ $counter -gt 100 ]; then
              exit 1
            fi
          done
  "submit_coverage":
    - command: shell.exec
      params:
        silent: true
        script: |
          set -e
          echo export COVERALLS_TOKEN=${coveralls_repo_token} >> creds
    - command: shell.exec
      params:
        silent: true
        script: |
          set -e
          export GOPATH=`pwd`
          export PATH="`pwd`:$PATH"
          source ./creds
          go get github.com/edaniels/goveralls
          export COVERALLS_PARALLEL=true
          export COVERALLS_GIT_COMMIT=${revision}
          export BUILD_NUMBER="${version_id}"
          if [ -z "${github_pr_number}" ]
          then
            if [ "${is_patch}" = "true" ]; then
              exit 0
            fi
            export CI_BRANCH=${branch_name}
          else
            PR_INFO=`curl  -H "Authorization: bearer ${github_api_token}" https://api.github.com/repos/${github_org}/${github_repo}/pulls/${github_pr_number}`
            BRANCH=`echo $PR_INFO | python -c "import sys, json; print json.load(sys.stdin)['head']['ref']"`
            export CI_BRANCH=$BRANCH
            export CI_PULL_REQUEST=${github_pr_number}
          fi
          cd src/github.com/10gen/stitch-cli
          $GOPATH/bin/goveralls -service evergreen -coverprofile=$GOPATH/cover.out

tasks:
  - name: test_unit
    exec_timeout_secs: 3600
    commands:
      - func: "setup_project"
      - command: shell.exec
        params:
          script: |
            set -v
            set -e
            export GOPATH=`pwd`
            export PATH="`pwd`:$PATH"
            go test -v -covermode=count -coverprofile=cover.out $(go list github.com/10gen/stitch-cli/...) > $GOPATH/stitch-cli.suite
      - func: "submit_coverage"

  - name: tests-with-cloud
    exec_timeout_secs: 3600
    commands:
      - func: "setup_project"
      - func: "setup_mongod"
      - func: "setup_stitch_server"
      - func: "start_server"
      - command: shell.exec
        params:
          script: |
            set -v
            set -e
            export GOPATH=`pwd`
            export PATH="`pwd`:$PATH"
            export STITCH_MONGODB_CLOUD_GROUP_ID="${stitch_mongodb_cloud_group_id}"
            export STITCH_MONGODB_CLOUD_USERNAME="${stitch_mongodb_cloud_username}"
            export STITCH_MONGODB_CLOUD_API_KEY="${stitch_mongodb_cloud_api_key}"
            export STITCH_MONGODB_CLOUD_ADMIN_USERNAME="${stitch_mongodb_cloud_admin_username}"
            export STITCH_MONGODB_CLOUD_ADMIN_API_KEY="${stitch_mongodb_cloud_admin_api_key}"
            export STITCH_MONGODB_CLOUD_API_BASE_URL="${mongoDBCloudURL}"
            export STITCH_SERVER_BASE_URL="${stitchServerURL}"
            go test -v -covermode=count -coverprofile=cover.out $(go list github.com/10gen/stitch-cli/${cloud_dependent_pkg}/...) -timeout 25m  -run TestCloud > $GOPATH/stitch-cli.suite
      - func: "submit_coverage"

  - name: gometalinter
    commands:
      - func: "setup_project"
      - command: shell.exec
        params:
          script: |
            export GOPATH=`pwd`
            go get -u github.com/alecthomas/gometalinter
            $GOPATH/bin/gometalinter --install
            cd src/github.com/10gen/stitch-cli
            (export PKGS=`go list ./... | grep -v "/vendor/"`; cd $GOPATH/src && echo $PKGS | xargs $GOPATH/bin/gometalinter --config=$GOPATH/src/github.com/10gen/stitch-cli/.gometalinter.json)

  - name: build_publish_clis
    depends_on:
      - name: test_unit
      - name: gometalinter
    patchable: false
    commands:
      - func: "setup_project"
      - command: shell.exec
        params:
          script: |
            set -v
            set -e
            export GOPATH=`pwd`
            export PATH="`pwd`:$PATH"
            cd src/github.com/10gen/stitch-cli
            export VERSION="1.2.0"
            export GOARCH=amd64
            export GOOS=linux
            export OSARCH=linux-amd64
            echo "Building stitch-cli for $GOOS on $GOARCH"
            REPLACE_VARS="-ldflags \"-X github.com/10gen/stitch-cli/utils.CLIVersion=$VERSION -X github.com/10gen/stitch-cli/utils.cliOSArch=$OSARCH\""
            eval go build $REPLACE_VARS -o stitch-cli-linux-amd64 main.go
            export GOOS=darwin
            export OSARCH=macos-amd64
            REPLACE_VARS="-ldflags \"-X github.com/10gen/stitch-cli/utils.CLIVersion=$VERSION -X github.com/10gen/stitch-cli/utils.cliOSArch=$OSARCH\""
            echo "Building stitch-cli for $GOOS on $GOARCH"
            eval go build $REPLACE_VARS -o stitch-cli-macos-amd64 main.go
            export GOOS=windows
            export OSARCH=windows-amd64
            REPLACE_VARS="-ldflags \"-X github.com/10gen/stitch-cli/utils.CLIVersion=$VERSION -X github.com/10gen/stitch-cli/utils.cliOSArch=$OSARCH\""
            echo "Building stitch-cli for $GOOS on $GOARCH"
            eval go build $REPLACE_VARS -o stitch-cli-windows-amd64 main.go
      - command: s3.put
        params:
          aws_key: ${artifacts_aws_key}
          aws_secret: ${artifacts_aws_secret}
          local_file: src/github.com/10gen/stitch-cli/stitch-cli-linux-amd64
          remote_file: ${build_id}/linux-amd64/stitch-cli
          bucket: stitch-clis
          content_type: application/octet-stream
          permissions: public-read
      - command: s3.put
        params:
          aws_key: ${artifacts_aws_key}
          aws_secret: ${artifacts_aws_secret}
          local_file: src/github.com/10gen/stitch-cli/stitch-cli-macos-amd64
          remote_file: ${build_id}/macos-amd64/stitch-cli
          bucket: stitch-clis
          content_type: application/octet-stream
          permissions: public-read
      - command: s3.put
        params:
          aws_key: ${artifacts_aws_key}
          aws_secret: ${artifacts_aws_secret}
          local_file: src/github.com/10gen/stitch-cli/stitch-cli-windows-amd64
          remote_file: ${build_id}/windows-amd64/stitch-cli.exe
          bucket: stitch-clis
          content_type: application/octet-stream
          permissions: public-read

  - name: finalize_coverage
    depends_on:
      - name: test_unit
        status: '*'
      - name: tests-with-cloud
        status: '*'
    commands:
      - command: shell.exec
        params:
          silent: true
          script: |
            set -e
            echo export COVERALLS_TOKEN=${coveralls_repo_token} >> creds
      - command: shell.exec
        params:
          silent: true
          script: |
            set -e
            source ./creds
            curl -k -X POST "https://coveralls.io/webhook?repo_token=$COVERALLS_TOKEN" -H "Content-Type: application/json" -d "{\"payload\": {\"build_num\": \"${version_id}\", \"status\": \"done\"}}"

post:
  - command: gotest.parse_files
    params:
      files: ["*.suite"]

buildvariants:
- name: linux-64
  display_name: Linux-64
  run_on:
  - baas-linux
  expansions:
    transpiler_target: node8-linux
    mongodb_url: https://downloads.mongodb.com/linux/mongodb-linux-x86_64-enterprise-rhel70-3.4.6.tgz
    libmongo_url: 'https://s3.amazonaws.com/stitch-artifacts/stitch-mongo-libs/stitch_mongo_libs_linux_64_patch_a4c34cbf6cdd2036fef442f966e404c8be506e62_5bb3da540305b91647c0dfd9_18_10_02_20_51_32/libmongo.so'
    mongoDBCloudURL: https://cloud-dev.mongodb.com
    stitchServerURL: http://localhost:9090
  tasks:
  - name: test_unit
  - name: tests-with-cloud
  - name: gometalinter
  - name: build_publish_clis
  - name: finalize_coverage
